import { Geist, Geist_Mono } from "next/font/google";
import Script from "next/script";

import type { Metadata } from "next";
import "./globals.css";
import { NotificationProvider } from "./context/NotificationContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "My Next.js PWA",
  description: "Generated by create next app",
  manifest: "/manifest.json",

  // iOS “web app” meta tags
  appleWebApp: {
    capable: true, // <meta name="apple-mobile-web-app-capable" content="yes">
    title: "My Next.js PWA", // <meta name="apple-mobile-web-app-title" content="My Next.js PWA">
    statusBarStyle: "default", // <meta name="apple-mobile-web-app-status-bar-style" content="default">
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <NotificationProvider>{children}</NotificationProvider>

        {/* Manually register the service worker in production */}
        <Script id="sw-register" strategy="afterInteractive">
          {`
            if ('serviceWorker' in navigator) {
              navigator.serviceWorker
                .register('/sw.js')
                .then(reg => console.log('✅ SW registered:', reg.scope))
                .catch(err => console.error('❌ SW registration failed:', err));
            }
          `}
        </Script>
      </body>
    </html>
  );
}
